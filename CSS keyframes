from{} and to{} keywords and using percentages(%) syntax
@keyframes animation-name { 

from { 

property-a: value-a; 

} 

 

to { 

property-a: value-b; 

} 

} 
The 'from' and 'to' keywords are used inside the @keyframes rule to mark the transition of one or more properties and can be seen as the start and end points of that transition. As can be seen from the syntax, the values of ‘property-a’ changes from ‘value-a’ to ‘value-b’. To expand on the use of ‘from’ and ‘to’, the @keyframes allows you to add more steps to your animation by using a percentage that represents the completion of the animation. 
@keyframes identifier { 

0% {transform: rotate(100deg);} 

30% {opacity: 1;} 

50% {opacity: 0.50;} 

70% {opacity: 1;} 

100% {transform: rotate(50deg);}

The different percentages used in the example demonstrate the progression of the animation. Note that it doesn’t have to be the same property that you modify in these steps. That's not possible using the transition property, but you can do it with @keyframes. This flexibility is what makes @keyframes so powerful. Another advantage is how these animations can also loop infinitely, run forwards, reverse and alternate.

@keyframes are tied in with the animation-name to which they are going to be applied. To give an overview of the animation property, it consists of other sub-properties. Of these, animation-name and animation-duration must be defined while others such as timing-function, delay, direction, fill-more, iteration-count and so on can be added. 

Animation property shorthand:

The shorthand for the animation property consists of the following properties with their default values:

animation-name: none 

animation-duration: 0s 

animation-timing-function: ease 

animation-delay: 0s 

animation-iteration-count: 1 

animation-direction: normal 

animation-fill-mode: none 

animation-play-state: running 

animation-timeline: auto 

If the values of any of these are not defined, you should assume that they are the default. Of these, the first property of the animation-name is what's used to tie it to the @keyframes rule.

Let’s now examine an example of how you can use @keyframes and the animation property. 

Animation example
HTML code:
<body> 

<div class="box"></div> 

</body> 

</html> 

CSS code:
body{ 

padding: 30px;} 

 

.box{ 

background-color: lightcoral; 

width: 50px; 

height: 50px; 

animation: myanimation 3s infinite ease-in; 

} 

 

@keyframes myanimation{ 

from{width: 50px; 

} 

 

to{width: 100px; 

} 

This is a very simple example of how you can use the animation property with the help of @keyframes rule to create your desired animation.

If you modify this code and change the animation rules to percentages, it will have the same output.     
@keyframes myanimation{
0%{width: 50px;
}

100%{width: 100px;
}


Now, let’s add an intermediary step at 50%. 
@keyframes myanimation{
0%{width: 50px;
}

50%{background-color: aquamarine;
    height: 20px;
}

100%{width: 100px;
}


